version: '3.8'

services:
  nlp-prompt-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nlp-prompt-database
    ports:
      - "3001:3001"
      - "8000:8000"  # For frontend if served separately
    volumes:
      # Mount data directory for persistence
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
      # Mount .env file if it exists
      - ./.env:/app/.env:ro
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - LOG_LEVEL=info
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nlp-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nlp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    depends_on:
      - nlp-prompt-db
    restart: unless-stopped
    networks:
      - nlp-network
    profiles:
      - production

  # Optional: Monitoring with Prometheus (for advanced setups)
  prometheus:
    image: prom/prometheus:latest
    container_name: nlp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - nlp-network
    profiles:
      - monitoring

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: nlp-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - nlp-network
    profiles:
      - monitoring

networks:
  nlp-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml content for development
version: '3.8'

services:
  nlp-prompt-db:
    build:
      target: builder  # Use builder stage for development
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=*
      - LOG_LEVEL=debug
    command: ["npm", "run", "dev"]
    ports:
      - "3001:3001"
      - "8000:8000"
      - "9229:9229"  # Debug port

  # Development database (optional)
  dev-db:
    image: node:18-alpine
    container_name: nlp-dev-tools
    working_dir: /app
    volumes:
      - .:/app
    command: ["npm", "run", "serve"]
    ports:
      - "8080:8080"
    profiles:
      - dev-tools